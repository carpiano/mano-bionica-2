---
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
	const pantallas = await fetch('https://192.168.0.81:4430/pantalla')
								.then(resp => resp.json())
								.catch(err => console.error(err));
	const ids = pantallas.map(p => ({ params: { id: p._id }}));

	return [
		{
			params: { id: undefined },
		},
		...ids
	];
}

const { id } = Astro.params;
---
<style>
[x-cloak] { display: none !important; }
</style>

<Layout title="Una nueva piel">
	<main
		class="bg-black text-white h-full py-4 px-6"
	>
		{!id && (
			<ul
				x-data="{ pantallas: [] }"
				x-init={`() => fetch('https://192.168.0.81:4430/pantalla')
								.then(resp => resp.json())
								.then(data => pantallas = data)
								.catch(err => console.error(err))`}
				class="flex flex-col gap-4 items-center"
			>
				<template x-for="p in pantallas">
					<li class="w-full">
						<a
							x-bind:href="'/interaccion/' + p._id"
							x-bind:class="!p.manipulable && 'pointer-events-none'"
							class="flex gap-4 p-4 border w-full justify-between"
						>
							<p x-text="p.id"></p>
							<p x-text="p.descripcion"></p>
						</a>
					</li>
				</template>
			</ul>
		)}
		{!!id && (
			<div
				x-data="{ pantalla: {}, cargando: true }"
				x-init={`() => fetch('https://192.168.0.81:4430/pantalla/${id}')
								.then(resp => resp.json())
								.then(data => pantalla = data)
								.then(() => cargando = false)
								.catch(err => console.error(err))`}
			>
				<p x-show="cargando">Cargando...</p>
				<p
					x-cloak
					x-show="!cargando && !pantalla.manipulable"
				>
					En este momento esta pantalla no est√° disponible
				</p>
				<div
					x-cloak
					x-show="!cargando && pantalla.manipulable"
					id="pantalla"
					data-id={id}
				>
				</div>
			</div>
		)}
	</main>
</Layout>

<script>
import Konva from 'konva';
import { io } from "socket.io-client";

const clamp = (num: number, min: number, max: number) => Math.min(Math.max(num, min), max);

const ws = io("https://192.168.0.81:4430", { path: "/ws/", withCredentials: false });
ws.on("pantalla patched", ({ x, y }) => circle.x(x).y(y));

const id = document.getElementById("pantalla")?.dataset?.id;

function patchCoordinate(x: number, y: number) {
    var json = {
		tipo: "float",
		x,
		y,
		nombre: "shift",
		duracion: -1,
    };

    fetch(`https://192.168.0.81:4430/pantalla/${id}`,
	 {
	      method: "PATCH",
	      headers: {
			'Content-Type': 'application/json'
	      },
	      body: JSON.stringify(json)
	  })
	.catch(err => console.log('Hubo un error' + err));
 }

const stage = new Konva.Stage({
	container: "pantalla",
	width: window.innerWidth,
	height: window.innerHeight,
});

const layer = new Konva.Layer();

const circle = new Konva.Circle({
	x: 100,
	y: 100,
	radius: 10,
	fill: "#89b717",
	opacity: 0.8,
	draggable: true,
});

circle.on("dragmove", e => {
	circle
		.x(clamp(circle.x(), circle.width() / 2, window.innerWidth - circle.width()))
		.y(clamp(circle.y(), circle.height() / 2, window.innerHeight - circle.height()));

	patchCoordinate(circle.x(), circle.y());
});

layer.add(circle);
stage.add(layer);

layer.draw();
</script>
